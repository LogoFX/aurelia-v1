// @if babel
// regenerator-runtime is to support async/await syntax in ESNext.
// If you target latest browsers (have native support), or don't use async/await, you can remove regenerator-runtime.
import 'regenerator-runtime/runtime';
// @endif
// @if typescript
import { Aurelia } from 'aurelia-framework';
// @endif
// @if ! webpack
import environment from './environment';
// @endif
// @if webpack
import * as environment from '../config/environment.json';
import {PLATFORM} from 'aurelia-pal';
// @endif

export function configure(aurelia/* @if typescript **: Aurelia/* @endif */)/* @if typescript **: void/* @endif */ {
  aurelia.use
    .standardConfiguration()
    // @if webpack
    .plugin(PLATFORM.moduleName('aurelia-validation'))
    .plugin(PLATFORM.moduleName('aurelia-dialog'), (configuration) => {
      // use only attach-focus
      configuration.useResource('attach-focus');
      configuration.useDefaults();
      configuration.settings.lock = true;
      configuration.settings.centerHorizontalOnly = false;
      configuration.settings.startingZIndex = 10;
      configuration.settings.keyboard = true;
    })
    .plugin(PLATFORM.moduleName('@logofx/aurelia-mvvm-plugin'))
    .feature(PLATFORM.moduleName('model/index'))
    .feature(PLATFORM.moduleName('data/index'))
    .feature(PLATFORM.moduleName('resources/index'));
    // @endif
    // @if cli-bundler
    .feature('resources');
    // @endif

  aurelia.use.developmentLogging(environment.debug ? 'debug' : 'warn');

  if (environment.testing) {
    // @if webpack
    aurelia.use.plugin(PLATFORM.moduleName('aurelia-testing'));
    // @endif
    // @if cli-bundler
    aurelia.use.plugin('aurelia-testing');
    // @endif
  }

  // @if webpack
  aurelia.start().then(() => aurelia.setRoot(PLATFORM.moduleName('app')));
  // @endif
  // @if cli-bundler
  aurelia.start().then(() => aurelia.setRoot());
  // @endif
}
