// @if babel
import gulp from 'gulp';
import project from '../aurelia.json';
// @endif
// @if typescript
import * as gulp from 'gulp';
import * as project from '../aurelia.json';
// @endif
import {flatten} from 'lodash';
import {CLIOptions, build as buildCLI} from 'aurelia-cli';
import transpile from './transpile';
import processMarkup from './process-markup';
import processJson from './process-json';
import processCSS from './process-css';
import copyFiles from './copy-files';


let watchPaths = [
  project.transpiler.source,
  project.markupProcessor.source,
  project.cssProcessor.source,
  project.jsonProcessor.source
];

if (typeof project.build.copyFiles === 'object') {
  watchPaths.push(Object.keys(project.build.copyFiles));
}

watchPaths = flatten(watchPaths);

let build = gulp.series(
  readProjectConfiguration,
  gulp.parallel(
    transpile,
    processMarkup,
    processJson,
    processCSS,
    copyFiles
  ),
  writeBundles
);

let main;

if (CLIOptions.taskName() === 'build' && CLIOptions.hasFlag('watch')) {
  main = function() {
    gulp.watch(watchPaths, {ignoreInitial: false}, build);
  };
} else {
  main = build;
}

function readProjectConfiguration() {
  return buildCLI.src(project);
}

function writeBundles() {
  return buildCLI.dest();
}

export { watchPaths, main as default };
